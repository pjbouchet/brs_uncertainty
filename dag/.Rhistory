ms2018
save(ms2018, file='/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/ms2018.RData')
load("~/OneDrive/Documents/MyScripts/R/Henry/Results2018.RData")
bathy
plot(bathy)
if(.Platform$OS.type=="unix"){od <- "/Users/philippebouchet/OneDrive/"
}else{od <- "D:/OneDrive/"}
bathy<-raster(paste(od,'Documents/Postdoc/Henry/Env/bathy.asc',sep=""))
bathy
east
plot(east)
summary(raster::getValues(east))
plot(bathy, col= pals::viridis(100))
east<-raster(paste(od,'Documents/Postdoc/Henry/Env/east.asc',sep=""))
north<-raster(paste(od,'Documents/Postdoc/Henry/Env/north.asc',sep=""))
rugos<-raster(paste(od,'Documents/Postdoc/Henry/Env/rugos.asc',sep=""))
clon<-raster(paste(od,'Documents/Postdoc/Henry/Env/curvlon.asc',sep=""))
ccrs<-raster(paste(od,'Documents/Postdoc/Henry/Env/curvcs.asc',sep=""))
slope<-raster(paste(od,'Documents/Postdoc/Henry/Env/slope.asc',sep=""))
plot(slope, col= pals::viridis(100))
slopevar<-raster(paste(od,'Documents/Postdoc/Henry/Env/slopecov_rs.asc',sep=""))
plot(slopevar, col= pals::viridis(100))
slopevar
tpi<-raster(paste(od,'Documents/Postdoc/Henry/Env/tpi.asc',sep=""))
frd<-raster(paste(od,'Documents/Postdoc/Henry/Rasters/frd_rs.asc',sep=""))
plot(frd)
frd
proj4string(frd)<-proj4string(bathy)
library(raster)
raster::stack(frd, bathy)
frd<-resample(frd,bathy, resample='bilinear')
plot(frd)
plot(PC2018.traj)
save(bathy, east, north, rugos, clon, ccrs, slope, slopevar, tpi, frd, file = '/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/envlayers.RData')
load("~/OneDrive/Documents/MyScripts/R/Henry/Revised/Henry_revised.Rproj")
load("/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/Revised/maxentpreds_foursurveys.RData")
load("/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/Revised/messpreds_foursurveys.RData")
load("/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/Revised/sightings_foursurveys.RData")
load("/Users/philippebouchet/OneDrive/Documents/MyScripts/R/Henry/Revised/tss_foursurveys.RData")
r2013 <- r2013b
r2016 <- r2016b
r2016N <- r2016Nb
rm(r2013b, r2016b, r2016Nb)
ms2103 <- ms2013b
ms2013 <- ms2013b
rm(ms2103)
rm(ms2013b)
ms2013.filtered <- ms2013b.filtered
rm(ms2013b.filtered)
ms2016 <- ms2016b
ms2016N <- ms2016Nb
rm(ms2016b)
rm(ms2016Nb)
ms2016.filtered <- ms2016b.filtered
rm(ms2016b.filtered)
ms2016N.filtered <- ms2016Nb.filtered
rm(ms2016Nb.filtered)
save.image("~/OneDrive/Documents/MyScripts/R/Henry/Revised/Results_foursurveys.RData")
load("~/OneDrive/Documents/MyScripts/R/Henry/Revised/Results_foursurveys.RData")
s.2013.pts <- s.2013
s.2016.pts <- s.2016
s.2016N.pts <- s.2016N
s.2018.pts <- s.2018
rm(s.2013, s.2016, s.2016N, s.2018)
save.image("~/OneDrive/Documents/MyScripts/R/Henry/Revised/Results_foursurveys.RData")
require(rjags)
install.packages('BayesianTools')
install.packages('coda')
install.packages('emdbook')
install.packages('geoR')
install.packages("coda")
require('BayesianTools')
require('coda')
require('emdbook')
require('geoR')
require('ggmap')
require('ggplot2')
require('inlabru')
require('jagsUI')
require('mvtnorm')
require('rjags')
install.packages('rjags')
require('rjags')
require('rstanarm')
require('R2jags')
require('shiny')
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
inla.update(testing=T)
require(INLA)
load("~/Dropbox/bouchet-extrapolation/data/Models/AFTT_Sperm_whales/spermwhale.RData")
load("~/Dropbox/bouchet-extrapolation/data/Models/AFTT_Sperm_whales/spermwhale_corrected.RData")
load("~/Dropbox/bouchet-extrapolation/data/Models/AFTT_Sperm_whales/transectsline.RData")
save.image("~/Dropbox/bouchet-extrapolation/data/Models/AFTT_Sperm_whales/sperm_whale.RData")
library(raster)
bel <- getData('GADM', country='BEL', level=1)
bel <- bel[bel$NAME_1 == 'Wallonie', ]
bel
plot(bel)
xy  <- spsample(bel, 1000, 'random')
v <- runif(1000)
r <- raster(bel, res=.1)
fun_ras <- function(x, ...){c(length(x), mean(x))}
r <- rasterize(xy, r, v, fun=fun_ras)
plot(r, addfun=function()lines(bel))
r <- raster(bel, res=.05)
fun_ras <- function(x, ...){c(length(x), mean(x))}
r <- rasterize(xy, r, v, fun=fun_ras)
plot(r, addfun=function()lines(bel))
plot(r, addfun=function()lines(bel), col = viridis::viridis(100))
r <- raster(bel, res=.075)
fun_ras <- function(x, ...){c(length(x), mean(x))}
r <- rasterize(xy, r, v, fun=fun_ras)
plot(r, addfun=function()lines(bel), col = viridis::viridis(100))
plot(r)
fun_ras <- function(x, ...){mean(x))}
r <- rasterize(xy, r, v, fun=fun_ras)
plot(r)
r <- rasterize(xy, r, v, fun=mean)
plot(r)
points(xy)
xy  <- spsample(bel, 100, 'random')
v <- runif(1000)
v <- runif(100)
r <- raster(bel, res=.075)
fun_ras <- function(x, ...){mean(x))}
r <- rasterize(xy, r, v, fun=mean)
plot(r)
points(xy)
r <- raster(bel, res=.75)
r <- rasterize(xy, r, v, fun=mean)
plot(r)
points(xy)
r <- raster(bel, res=.1)
r <- rasterize(xy, r, v, fun=mean)
plot(r)
points(xy)
r <- raster(bel, res=.3)
# fun_ras <- function(x, ...){mean(x))}
r <- rasterize(xy, r, v, fun=mean)
plot(r)
points(xy)
library(tiler)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile_dir <- file.path(tempdir(), "tiles")
tile(map, tile_dir, "0-3")
library(leaflet)
minZoom = 0
maxZoom = 13
resolutions <- 0.42*(2^(maxZoom:minZoom))
epsg28992 <- leafletCRS(crsClass = 'L.Proj.CRS.TMS', code = 'EPSG:28992',
proj4def = '+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs',
resolutions = resolutions,
projectedBounds = c(-285401.92, 22598.08, 595401.9199999999, 903401.9199999999))
leaflet(options = leafletOptions(
crs = epsg28992,
minZoom = minZoom, maxZoom = maxZoom)) %>%
setView(5.092098, 52.093992, zoom = 4) %>%
addTiles('http://geodata.nationaalgeoregister.nl/tms/1.0.0/brtachtergrondkaart/{z}/{x}/{y}.png', options = tileOptions(tms=TRUE))
points <-  geojsonio::geojson_read(system.file('examples/Historic_sites_and_monuments_point.kml', package='leaflet'), what='sp')
crsAntartica <-  leafletCRS(
crsClass = 'L.Proj.CRS',
code = 'EPSG:3031',
proj4def = '+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs',
resolutions = resolutions,
origin = c(-4194304, 4194304),
bounds =  list( c(-4194304, -4194304), c(4194304, 4194304) )
)
antarticaTilesURL <- "//map1{s}.vis.earthdata.nasa.gov/wmts-antarctic/MODIS_Aqua_CorrectedReflectance_TrueColor/default/2014-12-01/EPSG3031_250m/{z}/{y}/{x}.jpg"
leaflet(options= leafletOptions(
crs=crsAntartica, minZoom = zoom, maxZoom=maxZoom, worldCopyJump = FALSE)) %>%
setView(0, -90, 0) %>%
addPolygons(data=border, color = '#ff0000', weight = 2, fill = FALSE) %>%
addCircleMarkers(data=points, label=~Name) %>%
addTiles(urlTemplate = antarticaTilesURL,
layerId = "antartica_tiles",
attribution = "<a href='https://earthdata.nasa.gov/gibs'> NASA EOSDIS GIBS</a>&nbsp;&nbsp;&nbsp; <a href='https://github.com/nasa-gibs/web-examples/blob/release/leaflet/js/antarctic-epsg3031.js'> View Source </a>",
options = tileOptions(
tileSize =512,
subdomains = "abc",
noWrap = TRUE,
continuousWorld = TRUE,
format = "image%2Fjpeg"
)) %>%
addGraticule() %>%
htmlwidgets::onRender(
"function(el, t){
var myMap = this;
debugger;
var tileLayer = myMap.layerManager._byLayerId['tile\\nantartica_tiles'];
// HACK: BEGIN
// Leaflet does not yet handle these kind of projections nicely. Monkey
// patch the getTileUrl function to ensure requests are within
// tile matrix set boundaries.
var superGetTileUrl = tileLayer.getTileUrl;
tileLayer.getTileUrl = function(coords) {
debugger;
var max = Math.pow(2, tileLayer._getZoomForUrl() + 1);
if ( coords.x < 0 ) { return ''; }
if ( coords.y < 0 ) { return ''; }
if ( coords.x >= max ) { return ''; }
if ( coords.y >= max ) { return ''; }
return superGetTileUrl.call(tileLayer, coords);
};
// HACK: END
}")
library(tiler)
library(raster)
tile_dir <- file.path(tempdir(), "tiles")
map <- system.file("maps/map_wgs84.tif", package = "tiler")
(r <- raster(map))
#> class       : RasterLayer
#> dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution  : 0.8333333, 0.8333333  (x, y)
#> extent      : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> coord. ref. : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
#> data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_wgs84.tif
#> names       : map_wgs84
#> values      : -0.7205295, 5.545086  (min, max)
plot(r)
tile(map, tile_dir, "0-3")
library(rgdal)
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
plot(r)
tile(map, tile_dir, "0-3")
install.packages('tiler')
install.packages("tiler")
plot(r)
tile(map, tile_dir, "0-3")
library(tiler)
tile(map, tile_dir, "0-3")
tile_dir
tile_dir <- getwd()
tile(map, tile_dir, "0-3")
list.files(tile_dir)
tile_dir = "/Users/philippebouchet/OneDrive/tiles"
tile(map, tile_dir, "0-3")
list.files(tile_dir)
map
tiler::tile(map, tile_dir, "0-3",viewer = TRUE)
list.files(tile_dir)
tiler::tile(map, tile_dir, "0-7",viewer = TRUE)
list.files(tile_dir)
tile_dir
map <- system.file("maps/map_albers.tif", package = "tiler")
tile(map, tile_dir, "0-3")
list.files(tile_dir)
map
tile(map, tile_dir, "0-3")
tile
library(mapview)
library(raster)
# load data of the arctic stations
data("campsQ2")
# load the list of the above example
data("map.types")
mapview::projView(campsQ2,  map.types = map.types$NASA)
install_github("environmentalinformatics-marburg/mapview", ref = "develop")
devtools::install_github("environmentalinformatics-marburg/mapview", ref = "develop")
library(mapview)
library(raster)
# load data of the arctic stations
data("campsQ2")
# load the list of the above example
data("map.types")
mapview::projView(campsQ2,  map.types = map.types$NASA)
library(mapview)
library(leaflet)
#' Default SPherical Mercator Projection specified explicitly
leaflet(
options =
leafletOptions(crs = leafletCRS(crsClass = "L.CRS.EPSG3857"))) %>%
addTiles()
#' <br/><br/>Gothenberg, Sweeden in default projection
leaflet() %>%
addTiles() %>%
setView(11.965, 57.704, 16)
leaflet(
options =
leafletOptions(
crs = leafletCRS(
crsClass = "L.Proj.CRS",
code = "EPSG:3006",
proj4def = "+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
resolutions = c(
8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5 ),
origin = c(0, 0)
)
)) %>%
addTiles(
urlTemplate = "http://api.geosition.com/tile/osm-bright-3006/{z}/{x}/{y}.png",
attribution = "Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap contributors</a>, Imagery &copy; 2013 <a href=\"http://www.kartena.se/\">Kartena</a>",
options = tileOptions(minZoom = 0, maxZoom = 14)) %>%
setView(11.965, 57.704, 13)
library(sp)
srcURL <- "https://cdn.rawgit.com/turban/Leaflet.Graticule/master/examples/lib/countries-110m.js"
v8 <- V8::v8()
v8$source(srcURL)
geoJSON <- geojsonio::as.json(v8$get("countries"))
spdf <- geojsonio::geojson_sp(geoJSON)
sp::proj4string(spdf) # We need our data to be in WGS84 a.k.a EPSG4326 i.e. just latlong
# Leaflet will project the polygons/lines/markers to the target CRS before it maps them.
leaflet(options =
leafletOptions(maxZoom = 5,
crs = leafletCRS(crsClass = "L.Proj.CRS", code = "ESRI:53009",
proj4def = "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +a=6371000 +b=6371000 +units=m +no_defs",
resolutions = c(65536, 32768, 16384, 8192, 4096, 2048)
))) %>%
addGraticule(style = list(color = "#999", weight = 0.5, opacity = 1)) %>%
addGraticule(sphere = TRUE, style = list(color = "#777", weight = 1, opacity = 0.25)) %>%
addPolygons(data = spdf, weight = 1, color = "#ff0000")
library(tiler)
library(raster)
tile_dir <- file.path(tempdir(), "tiles")
map <- system.file("maps/map_wgs84.tif", package = "tiler")
(r <- raster(map))
#> class       : RasterLayer
#> dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution  : 0.8333333, 0.8333333  (x, y)
#> extent      : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> coord. ref. : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
#> data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_wgs84.tif
#> names       : map_wgs84
#> values      : -0.7205295, 5.545086  (min, max)
plot(r)
tile(map, tile_dir, "0-3")
file = map
tiles = tile_dir
tiles
tiles = getwd()
zoom = "0-3"
ext <- .get_ext(file)
file
.Platform$OS.type
ex <- tiler_options()$python
ex
dir.create
tiles
projected <- .proj_check(file, crs, ...)
format <- match.arg(format, c("xyz", "tms"))
format = c("xyz", "tms")
format <- match.arg(format, c("xyz", "tms"))
gdal2tiles <- switch(format, xyz = "python/gdal2tilesXYZ.py",
tms = "python/gdal2tiles.py")
gdal2tiles
g2t <- system.file(gdal2tiles, package = "tiler")
ex <- paste0(ex, " \"", g2t, "\" -z ", zoom, " -w none ",
"--tmpdir \"", normalizePath(g2t_tmp_dir), "\" ",
ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
g2t <- system.file("python/gdal2tilesIMG.py", package = "tiler")
ex <- paste0(ex, " \"", g2t, "\" --leaflet -p raster -z ",
zoom, " -w none ", "--tmpdir \"", normalizePath(g2t_tmp_dir),
"\" ", ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
file <- file.path(tempdir(), "tmp_raster.tif")
file
dir.create(g2t_tmp_dir <- file.path(tempdir(), "g2ttmp"),
showWarnings = FALSE, recursive = TRUE)
g2t_tmp_dir
gdal2tiles <- switch(format, xyz = "python/gdal2tilesXYZ.py",
tms = "python/gdal2tiles.py")
g2t <- system.file(gdal2tiles, package = "tiler")
ex <- paste0(ex, " \"", g2t, "\" -z ", zoom, " -w none ",
"--tmpdir \"", normalizePath(g2t_tmp_dir), "\" ",
ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
resume = FALSE
ex <- paste0(ex, " \"", g2t, "\" -z ", zoom, " -w none ",
"--tmpdir \"", normalizePath(g2t_tmp_dir), "\" ",
ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
g2t <- system.file("python/gdal2tilesIMG.py", package = "tiler")
ex <- paste0(ex, " \"", g2t, "\" --leaflet -p raster -z ",
zoom, " -w none ", "--tmpdir \"", normalizePath(g2t_tmp_dir),
"\" ", ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
system(ex, ignore.stderr = TRUE)
ex
tile_dir <- file.path(tempdir(), "tiles")
tile_dir
tiles = tile_dir
ex <- tiler_options()$python
ex
file <- file.path(tempdir(), "tmp_raster.tif")
dir.create(g2t_tmp_dir <- file.path(tempdir(), "g2ttmp"),
showWarnings = FALSE, recursive = TRUE)
g2t <- system.file("python/gdal2tilesIMG.py", package = "tiler")
ex <- paste0(ex, " \"", g2t, "\" --leaflet -p raster -z ",
zoom, " -w none ", "--tmpdir \"", normalizePath(g2t_tmp_dir),
"\" ", ifelse(resume, "-e ", ""), "\"", normalizePath(file),
"\" \"", normalizePath(tiles), "\"")
normalizePath
system(ex, ignore.stderr = TRUE)
unlink(g2t_tmp_dir, recursive = TRUE, force = TRUE)
library(tiler)
file <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(file, "tiles", "0-7")
tempdir()
devtools::install_github("ropensci/tiler")
library(tiler)
file <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(file, "tiles", "0-7")
tempdir()
tile_dir <- file.path(tempdir(), "tiles")
file <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(file, tile_dir, "0-3")
library(tiler)
library(raster)
tile_dir <- file.path(tempdir(), "tiles")
map <- system.file("maps/map_wgs84.tif", package = "tiler")
(r <- raster(map))
#> class       : RasterLayer
#> dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution  : 0.8333333, 0.8333333  (x, y)
#> extent      : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> coord. ref. : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
#> data source : C:\Users\Matt\AppData\Local\Temp\RtmpEpolVF\Rinst157054534f96\tiler\maps\map_wgs84.tif
#> names       : map_wgs84
#> values      : -0.7205295, 5.545086  (min, max)
plot(r)
tile(map, tile_dir, "0-3")
log2(8)
x <- seq(0, 250, 1)
y <- 210-20*log10(x)-0.000185*x
curve(y~x)
plot(x, y)
log2(8)
2^3
0.000185^10
log10(4.695883e-38)
10^0.000185
log10(1.000426)
log10(10^0.000185)
10^0.000185
rL = 140
10^((210 - rL)/20)
Y
y
y <- 210-20*log(x)-0.000185*x
plot(x, y)
x <- seq(0, 250000, 1)
y <- 210-20*log(x)-0.000185*x
x <- seq(0, 250000, 1)
x <- seq(0, 250000, 10)
x
y <- 210-20*log(x)-0.000185*x
plot(x, y)
x <- seq(0, 250000, 10)
y <- 210-20*log10(x)-0.000185*x
plot(x,y)
which(y==141)
which(y==142)
Y
y
6437/pi
sqrt(6437/pi)
x = 165
1/(1+exp(165.8-x)/4.6)
x = 140
1/(1+exp(165.8-x)/4.6)
1/(1+exp(165.8-160)/4.6)
1/((1+exp(165.8-160))/4.6)
1/(1+(exp(165.8-160)/4.6))
1/(1+(exp(165.8-180)/4.6))
1/(1+(exp(165.8-170)/4.6))
1/(1+(exp(165.8-160)/4.6))
x <- seq(80, 200, 0.5)
y <- 1/(1+(exp(165.8-x)/4.6))
plot(x,y)
x <- seq(80, 200, 1)
y <- 1/(1+exp(165.8-x)/4.6)
plot(x,y)
y <- 1/(1+exp(165-x)/4.6)
plot(x,y)
1/(1 - exp(165.8 – 160)/4.6)
1/(1-exp(165.8 – 160)/4.6)
1/(1-exp(165.8-160)/4.6)
1/(1+exp(165.8-160)/4.6)
library(reticulate)
reticulate::use_python("/usr/bin/python")
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
os <- import("os")
os$listdir(".")
use_condaenv()
library(reticulate)
use_condaenv(condaenv = 'py37', required = TRUE)
?use_python
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
install.packages("reticulate")
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
reticulate::repl_python()
# https://www.youtube.com/watch?v=m_MAYRDIuN4
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
setwd("~/OneDrive/Documents/Postdoc/CREEM/dMOCHA/code/dose-response/dag")
# https://www.youtube.com/watch?v=m_MAYRDIuN4
library(reticulate)
reticulate::use_python("/Users/philippebouchet/anaconda3/bin/python")
reticulate::py_run_file(file = "example_dag.py")
knit_with_parameters('~/OneDrive/Documents/Postdoc/CREEM/dMOCHA/code/dose-response/init_sim/BayesianABRModel_SimulationJAGS.Rmd')
