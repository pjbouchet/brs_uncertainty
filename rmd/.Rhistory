# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M <- logN.draw(n = 1, m = 11.252, s = 36.190)
m <- logN.draw(n = 1, m = 0.493, s = 4.894)
alpha <- rnorm(n = 1, mean = 90, sd = 20)
# alpha = 90
# M = -2
# m = -2
d1 <- ((M/sqrt(2))^2)*(sin(alpha*pi/180)^2)+((m/sqrt(2))^2)*(cos(alpha*pi/180)^2)
d2 <- ((M/sqrt(2))^2)*(cos(alpha*pi/180)^2)+((m/sqrt(2))^2)*(sin(alpha*pi/180)^2)
a.cov <- ((M^2-m^2)/2)*cos(alpha*pi/180)*sin(alpha*pi/180)
# Parameters for bivariate normal distribution
mu <- c(mu1,mu2) # Mean
# sigma <- matrix(c(s1^2, s1*s2*rho,
#                   s1*s2*rho, s2^2),2) # Covariance matrix
sigma <- matrix(c(d1, a.cov,
a.cov, d2),2) # Covariance matrix
# Function to draw ellipse for bivariate normal data
ellipse_bvn <- function(bvn, alpha){
Xbar <- apply(bvn,2,mean)
S <- cov(bvn)
ellipse(Xbar, S, alpha = alpha, col="black")
}
# library(MASS)
bvn2 <- tmvtnorm::rtmvnorm(n = N, mean = mu, sigma = sigma, lower = rep(0, ncol(sigma)), upper = rep(100, ncol(sigma)))
bivn.kde <- MASS::kde2d(bvn2[,1], bvn2[,2], n = 50)
image(bivn.kde)
ellipse_bvn(bvn2,0.5)
M
m
alpha
library(DHARMa)
testData = createData(sampleSize = 500, overdispersion = 0, fixedEffects = 5, family = binomial(), randomEffectVariance = 3, numGroups = 25)
fittedModel <- glm(observedResponse ~ 1, family = "binomial", data = testData)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)
plot(simulationOutput, asFactor = T)
testData = createData(sampleSize = 500, overdispersion = 0, fixedEffects = 5, family = binomial(), randomEffectVariance = 3, numGroups = 25)
fittedModel <- mgcv::gam(observedResponse ~ 1, family = "binomial", data = testData)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)
plot(simulationOutput, asFactor = T)
head(testData)
testData = createData(sampleSize = 500, overdispersion = 0, fixedEffects = 5, family = binomial(), randomEffectVariance = 3, numGroups = 25)
fittedModel <- mgcv::gam(observedResponse ~ s(Environment1), family = "binomial", data = testData)
fittedModel
simulationOutput <- simulateResiduals(fittedModel = fittedModel)
plot(simulationOutput, asFactor = T)
plot(simulationOutput, asFactor = F)
testData = createData(sampleSize = 500, overdispersion = 0, fixedEffects = 5, family = binomial(), randomEffectVariance = 3, numGroups = 25)
fittedModel <- mgcv::gam(observedResponse ~ s(Environment1), family = binomial(link = "logit"), data = testData)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)
plot(simulationOutput, asFactor = F)
install.packages("RgoogleMaps")
library(RgoogleMaps)
lat = c(40.702147,40.718217,40.711614);
lon = c(-74.012318,-74.015794,-73.998284);
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)));
bb=qbbox(lat,lon)
bb
par(pty="s")
#Google
myMap=GetMap(center,zoom=15,urlBase = "http://mt1.google.com/vt/lyrs=m", tileDir= "~/mapTiles/Google/")
PlotOnStaticMap(myMap,lat=lat,lon=lon,pch=20,col=c('red', 'blue', 'green'),cex=2)
resp <- c(1,1,1,1,1,1,1,1,1,1, rep(0,50))
resp
prev=0.5
subset=NULL
if(is.null(subset)) subset<- rep(TRUE, length(resp))
subset
nbPres <- sum(resp[subset], na.rm=TRUE)
nbPres
sum(resp)
nbAbsKept <- sum(subset, na.rm=T) - sum(resp[subset], na.rm=TRUE) # The number of true absences + pseudo absences to maintain true value of prevalence
nbAbsKept
Yweights <- rep(1,length(resp))
Yweights
nbAbsKept
nbAbsKept > nbPres
prev
Yweights[which(resp>0)] <- (prev * nbAbsKept) / (nbPres * (1-prev))
Yweights
Yweights = round(Yweights[])
Yweights
subset
Yweights[!subset]
Yweights[!subset] <- 0
Yweights
5*10
sum(Yweights)
resp <- c(rep(1, 65), rep(0, 488))
automatic_weights_creation <- function(resp, prev=0.5, subset=NULL){
if(is.null(subset)) subset<- rep(TRUE, length(resp))
nbPres <- sum(resp[subset], na.rm=TRUE)
nbAbsKept <- sum(subset, na.rm=T) - sum(resp[subset], na.rm=TRUE) # The number of true absences + pseudo absences to maintain true value of prevalence
Yweights <- rep(1,length(resp))
if(nbAbsKept > nbPres){ # code absences as 1
Yweights[which(resp>0)] <- (prev * nbAbsKept) / (nbPres * (1-prev))
} else{ # code presences as 1
Yweights[which(resp==0 | is.na(resp))] <- (nbPres * (1-prev)) / (prev * nbAbsKept)
}
Yweights = round(Yweights[])
Yweights[!subset] <- 0
return(Yweights)
}
test <- automatic_weights_creation(resp = resp)
test
sum(test[resp==1])
test
resp
test[resp==1]
sum(test[resp==1])
sum(test[resp==0])
automatic_weights_creation <- function(resp, prev=0.5, subset=NULL){
if(is.null(subset)) subset<- rep(TRUE, length(resp))
nbPres <- sum(resp[subset], na.rm=TRUE)
nbAbsKept <- sum(subset, na.rm=T) - sum(resp[subset], na.rm=TRUE) # The number of true absences + pseudo absences to maintain true value of prevalence
Yweights <- rep(1,length(resp))
if(nbAbsKept > nbPres){ # code absences as 1
Yweights[which(resp>0)] <- (prev * nbAbsKept) / (nbPres * (1-prev))
} else{ # code presences as 1
Yweights[which(resp==0 | is.na(resp))] <- (nbPres * (1-prev)) / (prev * nbAbsKept)
}
# Yweights = round(Yweights[])
Yweights[!subset] <- 0
return(Yweights)
}
test <- automatic_weights_creation(resp = resp)
test
sum(test[resp==0])
sum(test[resp==1])
0.5*50/(10*0.5)
0.5*48/(10*0.5)
setwd("~/OneDrive/Documents/Postdoc/CREEM/dMOCHA/code/dose-response/simulation/dose_uncertainty/rmd")
